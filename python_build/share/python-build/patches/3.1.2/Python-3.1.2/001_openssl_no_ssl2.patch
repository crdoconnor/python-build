diff -r -u ../Python-3.1/Lib/ssl.py ./Lib/ssl.py
--- ../Python-3.1/Lib/ssl.py	2009-06-04 18:42:55.000000000 +0900
+++ ./Lib/ssl.py	2015-08-15 13:12:22.270915671 +0900
@@ -60,8 +60,20 @@
 
 from _ssl import SSLError
 from _ssl import CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED
-from _ssl import (PROTOCOL_SSLv2, PROTOCOL_SSLv3, PROTOCOL_SSLv23,
+from _ssl import (PROTOCOL_SSLv3, PROTOCOL_SSLv23,
                   PROTOCOL_TLSv1)
+_PROTOCOL_NAMES = {
+    PROTOCOL_TLSv1: "TLSv1",
+    PROTOCOL_SSLv23: "SSLv23",
+    PROTOCOL_SSLv3: "SSLv3",
+}
+try:
+    from _ssl import PROTOCOL_SSLv2
+    _SSLv2_IF_EXISTS = PROTOCOL_SSLv2
+except ImportError:
+    _SSLv2_IF_EXISTS = None
+else:
+    _PROTOCOL_NAMES[PROTOCOL_SSLv2] = "SSLv2"
 from _ssl import RAND_status, RAND_egd, RAND_add
 from _ssl import (
     SSL_ERROR_ZERO_RETURN,
@@ -434,13 +446,4 @@
     return DER_cert_to_PEM_cert(dercert)
 
 def get_protocol_name(protocol_code):
-    if protocol_code == PROTOCOL_TLSv1:
-        return "TLSv1"
-    elif protocol_code == PROTOCOL_SSLv23:
-        return "SSLv23"
-    elif protocol_code == PROTOCOL_SSLv2:
-        return "SSLv2"
-    elif protocol_code == PROTOCOL_SSLv3:
-        return "SSLv3"
-    else:
-        return "<unknown>"
+    return _PROTOCOL_NAMES.get(protocol_code, '<unknown>')
diff -r -u ../Python-3.1/Modules/_ssl.c ./Modules/_ssl.c
--- ../Python-3.1/Modules/_ssl.c	2009-05-06 07:31:58.000000000 +0900
+++ ./Modules/_ssl.c	2015-08-15 13:13:23.812369742 +0900
@@ -62,7 +62,9 @@
 };
 
 enum py_ssl_version {
+#ifndef OPENSSL_NO_SSL2
 	PY_SSL_VERSION_SSL2,
+#endif
 	PY_SSL_VERSION_SSL3,
 	PY_SSL_VERSION_SSL23,
 	PY_SSL_VERSION_TLS1,
@@ -301,8 +303,10 @@
 		self->ctx = SSL_CTX_new(TLSv1_method()); /* Set up context */
 	else if (proto_version == PY_SSL_VERSION_SSL3)
 		self->ctx = SSL_CTX_new(SSLv3_method()); /* Set up context */
+#ifndef OPENSSL_NO_SSL2
 	else if (proto_version == PY_SSL_VERSION_SSL2)
 		self->ctx = SSL_CTX_new(SSLv2_method()); /* Set up context */
+#endif
 	else if (proto_version == PY_SSL_VERSION_SSL23)
 		self->ctx = SSL_CTX_new(SSLv23_method()); /* Set up context */
 	PySSL_END_ALLOW_THREADS
@@ -1693,8 +1697,10 @@
 				PY_SSL_CERT_REQUIRED);
 
 	/* protocol versions */
+#ifndef OPENSSL_NO_SSL2
 	PyModule_AddIntConstant(m, "PROTOCOL_SSLv2",
 				PY_SSL_VERSION_SSL2);
+#endif
 	PyModule_AddIntConstant(m, "PROTOCOL_SSLv3",
 				PY_SSL_VERSION_SSL3);
 	PyModule_AddIntConstant(m, "PROTOCOL_SSLv23",
